name: 'Container Image Builder'

on:
  workflow_dispatch:
  push:
    branches: [ "*" ]

jobs:
  releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Release
        id: relese
        shell: bash
        run: |
          releases=
          for relese in $(git diff --name-only HEAD HEAD~1 | cut -f 1 -d \/);do
            releases+=$release
          done

          echo "releases=$releases" >> $GITHUB_ENV
          echo "releaseTag=$(date +%Y%m%d.%H%M)" >> $GITHUB_ENV
    outputs:
      releaseName: ${{ steps.relese.outputs.releases }}
      releaseTag: ${{ steps.relese.outputs.releaseTag }}

  build-release:
    runs-on: ubuntu-22.04
    needs: [releases]
    strategy:
      matrix:
        releases: ${{ fromJSON(needs.releases.outputs.releaseName) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Releases
        uses: gitbarnabedikartola/dockerimages@main
        with:
          releaseName: ${{ matrix.releases }}
          releaseTag: ${{ needs.releases.outputs.releaseTag }}
          registry: docker.io
          registryUser: ${{ secrets.DOCKER_USERNAME }}
          registryPassword: ${{ secrets.DOCKER_PASSWORD }}
          registryProject: barnabenimbus
          archs: linux/amd64

          
#       - name: Hadolint
#         shell: bash -O extglob {0}
#         run: |
#           sudo wget -qO /usr/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
#           sudo chmod +x /bin/hadolint
#           export HADOLINT_NOFAIL=true
#           hadolint ${{ env.RELEASE }}/Dockerfile
#
#       # - name: Hadolint
#       #   uses: hadolint/hadolint-action@master
#       #   with:
#       #     dockerfile: "${{ env.RELEASE }}/Dockerfile"
#       #     no-fail: true
#
#       - name: Echo Release
#         shell: bash
#         run: |
#           echo "RELEASE and TAG"
#           echo "Release= ${{ env.RELEASE }}"
#           echo "Tag= ${{ env.RELEASETAG }}"
#
#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@master
#         with:
#           platforms: all
#
#       - name: Set up Docker Buildx
#         id: buildx
#         uses: docker/setup-buildx-action@master
#
#       - name: Login to DockerHub
#         if: github.event_name != 'pull_request'
#         uses: docker/login-action@v3
#         with:
#           registry: docker.io
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#
#       - name: Build Multi-Arch
#         uses: docker/build-push-action@v5
#         with:
#           context: ${{ env.RELEASE }}
#           file: ${{ env.RELEASE }}/Dockerfile
#           # build-args: |
#           #   PUBLIC_URL=./
#           #   NODE_IMAGE=${{ env.NODE_IMAGE }}
#           # platforms: linux/amd64,linux/arm64
#           platforms: linux/amd64
#           push: true
#           tags: |
#             barnabenimbus/${{ env.RELEASE }}:latest
#             barnabenimbus/${{ env.RELEASE }}:${{ env.RELEASETAG }}
